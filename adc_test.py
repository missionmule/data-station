#!/usr/bin/python
import spidev
import time
import RPi.GPIO as GPIO

spi = spidev.SpiDev()
spi.open(0,0)
spi.mode = 0b01
spi.max_speed_hz = 16000000

GPIO.setmode(GPIO.BCM)
GPIO.setup(24, GPIO.IN, pull_up_down = GPIO.PUD_UP)

i = 0
n = 0

def Interrupt(channel):
    global n
  # -- read data and registers 02h..05h    resp1 = spi.xfer2([0x22, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    resp2 = spi.xfer2([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    resp3 = spi.xfer2([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    resp4 = spi.xfer2([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    n  = n + 1
    if n == 100:
        print ''.join(["0x%02X " % x for x in resp1]).strip()
        print ''.join(["0x%02X " % x for x in resp2]).strip()
        print ''.join(["0x%02X " % x for x in resp3]).strip()
        print ''.join(["0x%02X " % x for x in resp4]).strip()
        print ""
        n = 1


try:
# avoid wrong bit sync
  resp = spi.xfer2([0x06, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
  time.sleep(0.1)
  resp = spi.xfer2([0x05, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
# --------------------------------------------------------
#    GPIO.add_event_detect(24, GPIO.FALLING, callback = Interrupt)
# -- interrupt generation starts without wake-up !!!???
# -- >>> TI-Blog: "expected behaviour"; wait for READY Word 0xFF 0x04 and start with UNLOCK
  while i == 0:
    i = i + 1
#   -- unlock
    resp = spi.xfer2([0x06, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    print ''.join(["0x%02X " % x for x in resp]).strip()
#   -- read all registers
    resp = spi.xfer2([0x20, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    print ''.join(["0x%02X " % x for x in resp]).strip()
    resp = spi.xfer2([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    print ''.join(["0x%02X " % x for x in resp]).strip()
    resp = spi.xfer2([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    print ''.join(["0x%02X " % x for x in resp]).strip()
    resp = spi.xfer2([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    print ''.join(["0x%02X " % x for x in resp]).strip()
    resp = spi.xfer2([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    print ''.join(["0x%02X " % x for x in resp]).strip()
    resp = spi.xfer2([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    print ''.join(["0x%02X " % x for x in resp]).strip()
    resp = spi.xfer2([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    print ''.join(["0x%02X " % x for x in resp]).strip()
    resp = spi.xfer2([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    print ''.join(["0x%02X " % x for x in resp]).strip()
    resp = spi.xfer2([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    print ''.join(["0x%02X " % x for x in resp]).strip()
    resp = spi.xfer2([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    print ''.join(["0x%02X " % x for x in resp]).strip()
    resp = spi.xfer2([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    print ''.join(["0x%02X " % x for x in resp]).strip()
    resp = spi.xfer2([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    print ''.join(["0x%02X " % x for x in resp]).strip()
#   -- lock
    resp = spi.xfer2([0x05, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    print ''.join(["0x%02X " % x for x in resp]).strip()
#   -- wait for lock response
    resp = spi.xfer2([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    print ''.join(["0x%02X " % x for x in resp]).strip()
    print ""
    time.sleep(5)
#  end while
  while i == 1:
    i = i + 1
#   -- unlock
    resp = spi.xfer2([0x06, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    print ''.join(["0x%02X " % x for x in resp]).strip()
#   -- CLK2 (0x0E): 8 - fICLK/8, 0 - fMOD/4096
    resp = spi.xfer2([0x4E, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    print ''.join(["0x%02X " % x for x in resp]).strip()
#   -- ADC_ENA (0x0F): F - enable all ADCs
    resp = spi.xfer2([0x4F, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    print ''.join(["0x%02X " % x for x in resp]).strip()
#   -- wakeup
    resp = spi.xfer2([0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    print ''.join(["0x%02X " % x for x in resp]).strip()
#   -- lock
    resp = spi.xfer2([0x05, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    print ''.join(["0x%02X " % x for x in resp]).strip()
#   -- wait for lock response
    resp = spi.xfer2([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    print ''.join(["0x%02X " % x for x in resp]).strip()
    resp = spi.xfer2([0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00])
    print ''.join(["0x%02X " % x for x in resp]).strip()
    print ""
    GPIO.add_event_detect(24, GPIO.FALLING, callback = Interrupt)
    time.sleep(2)
#  end while
  while i == 2:
    i = i + 1
#  end while
  while True:
    time.sleep(1)
#  end while
except KeyboardInterrupt:
  spi.close()
  GPIO.cleanup()
  print "\nTschaui"
  print ""
# end try
